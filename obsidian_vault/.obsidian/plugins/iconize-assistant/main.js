/** GENERATED BY OBSIDIAN-PLUGIN-CLI, DO NOT EDIT */
var T=Object.create;var m=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,A=Object.prototype.hasOwnProperty;var y=n=>m(n,"__esModule",{value:!0});var N=(n,i)=>{y(n);for(var t in i)m(n,t,{get:i[t],enumerable:!0})},C=(n,i,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let e of P(i))!A.call(n,e)&&e!=="default"&&m(n,e,{get:()=>i[e],enumerable:!(t=I(i,e))||t.enumerable});return n},v=n=>C(y(m(n!=null?T(k(n)):{},"default",n&&n.__esModule&&"default"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);N(exports,{default:()=>S});var h=v(require("obsidian"));function $(n){for(var i=[],t=1;t<arguments.length;t++)i[t-1]=arguments[t];var e=Array.from(typeof n=="string"?[n]:n);e[e.length-1]=e[e.length-1].replace(/\r?\n([\t ]*)$/,"");var s=e.reduce(function(r,u){var g=u.match(/\n([\t ]+|(?!\s).)/g);return g?r.concat(g.map(function(f){var d,o;return(o=(d=f.match(/[\t ]/g))===null||d===void 0?void 0:d.length)!==null&&o!==void 0?o:0})):r},[]);if(s.length){var c=new RegExp(`
[	 ]{`+Math.min.apply(Math,s)+"}","g");e=e.map(function(r){return r.replace(c,`
`)})}e[0]=e[0].replace(/^\r?\n/,"");var a=e[0];return i.forEach(function(r,u){var g=a.match(/(?:^|\n)( *)$/),f=g?g[1]:"",d=r;typeof r=="string"&&r.includes(`
`)&&(d=String(r).split(`
`).map(function(o,p){return p===0?o:""+f+o}).join(`
`)),a+=d+e[u+1]}),a}var F=$;var x={iconFolderPath:".obsidian/.icons",linkToFile:{enable:!0,name:"icon_file",hide:!1},iconName:{enable:!0,name:"icon",hide:!1},allowRegex:!0};var l=v(require("obsidian")),b=class extends l.PluginSettingTab{constructor(i,t){super(i,t);this.plugin=t,this.settings=t.settings}display(){let{containerEl:i}=this;i.empty(),this.settings.iconFolderPath.startsWith(".obsidian")?new l.Setting(i).setHeading().setDesc("Could not find the icon folder ! You need to have to have your icons accessible by Obsidian for linking to it. Reload this plugin after edit to make it works!"):(new l.Setting(i).setHeading().setName("Icon File - Link into frontmatter"),new l.Setting(i).setName("Enable").addToggle(t=>t.setValue(this.settings.linkToFile.enable).onChange(async e=>{this.settings.linkToFile.enable=e,await this.plugin.saveSettings(),this.display(),this.plugin.addCSS()})),this.settings.linkToFile.enable&&(new l.Setting(i).setName("Name").setDesc("Name in the frontmatter/properties").addText(t=>t.setValue(this.settings.linkToFile.name).onChange(async e=>{this.settings.linkToFile.name=e,await this.plugin.saveSettings(),this.plugin.addCSS()})),new l.Setting(i).setName("Hide").setDesc("Hide the key in Properties (in Live Preview or reading mode). The key continue to be visible in source mode.").addToggle(t=>t.setValue(this.settings.linkToFile.hide).onChange(async e=>{this.settings.linkToFile.hide=e,await this.plugin.saveSettings(),this.plugin.addCSS()})))),new l.Setting(i).setHeading().setName("Icon Name - Name into frontmatter").setDesc('Icon will be in the form of "folder/name".'),new l.Setting(i).setName("Enable").addToggle(t=>t.setValue(this.settings.iconName.enable).onChange(async e=>{this.settings.iconName.enable=e,await this.plugin.saveSettings(),this.display(),this.plugin.addCSS()})),this.settings.iconName.enable&&(new l.Setting(i).setName("Name").setDesc("Name in the frontmatter/properties").addText(t=>t.setValue(this.settings.iconName.name).onChange(async e=>{this.settings.iconName.name=e,await this.plugin.saveSettings(),this.plugin.addCSS()})),new l.Setting(i).setName("Hide").setDesc("Hide the key in Properties (in Live Preview or reading mode). The key continue to be visible in source mode.").addToggle(t=>t.setValue(this.settings.iconName.hide).onChange(async e=>{this.settings.iconName.hide=e,await this.plugin.saveSettings(),this.plugin.addCSS()}))),new l.Setting(i).setName("Allow regex").setDesc("Sometimes, you didn't want the inheritance of the icon (used with regex rules in Iconize).").addToggle(t=>t.setValue(this.settings.allowRegex).onChange(async e=>{this.settings.allowRegex=e,await this.plugin.saveSettings()}))}};var S=class extends h.Plugin{createIconPackPrefix(i){if(i.includes("-")){let t=i.split("-"),e=t[0].charAt(0).toUpperCase();for(let s=1;s<t.length;s++)e+=t[s].charAt(0).toLowerCase();return e}return i.charAt(0).toUpperCase()+i.charAt(1).toLowerCase()}searchIfApplicable(i,t){if(!!this.settings.allowRegex)return i.find(e=>{let s=new RegExp(e.rule);return(e.for==="everything"||e.for==="files")&&s.test(t)})}findFolderNote(i){if(i.basename==="index"||i.basename===i.parent.name)return i.parent;let t=new RegExp(`\\.${i.extension}$`),e=i.path.replace(t,""),s=this.app.vault.getAbstractFileByPath(e);if(s instanceof h.TFolder)return s}async getFileIcons(i){let e=await this.app.plugins.getPlugin("obsidian-icon-folder").loadData(),s=e.settings.rules,c=e.settings.iconPacksPath;this.settings.iconFolderPath=c,await this.saveSettings(),delete e.settings;let a=e,r=i.path,u=this.findFolderNote(i)?.path,g=a[r]?a[r].toString():a[u]?a[u].toString():null,d=(await this.app.vault.adapter.list(c)).folders.map(o=>({pack:o,prefix:this.createIconPackPrefix(o.split("/").pop())}));if(g){let o=d.find(p=>g.startsWith(p.prefix));if(o)return`${o.pack}/${g.replace(o.prefix,"")}`.replace(`${c}/`,"")}else if(this.searchIfApplicable(s,r)){let o=this.searchIfApplicable(s,r).icon,p=d.find(w=>o.startsWith(w.prefix));if(p)return`${p.pack}/${o.replace(p.prefix,"")}`.replace(`${c}/`,"")}return null}async editFrontmatter(i,t){let e=this.app.vault.getAbstractFileByPath((0,h.normalizePath)(`${this.settings.iconFolderPath}/${t}.svg`));console.log(`Get icon as file: ${e}`),await this.app.fileManager.processFrontMatter(i,s=>{e&&e instanceof h.TFile&&this.settings.linkToFile.enable&&(s[`${this.settings.linkToFile.name}`]=`[[${e.path}|${e.basename}]]`),this.settings.iconName.enable&&(s[`${this.settings.iconName.name}`]=t)})}async addCSS(){let i=(0,h.normalizePath)(`${this.app.vault.configDir}/plugins/${this.manifest.id}/styles.css`),t="",e=await this.app.vault.adapter.read(i),s=a=>`/* Hide ${a} in properties */
			.metadata-property[data-property-key="${a}"] { 
				display: none !important;
			}
			`;if(this.settings.iconName.enable&&this.settings.iconName.hide&&(t=s(this.settings.iconName.name)),this.settings.linkToFile.enable&&this.settings.linkToFile.hide&&(t+=s(this.settings.linkToFile.name)),e===t)return;await this.app.vault.adapter.write(i,F(t));let c=document.querySelector(`style[plugin="${this.manifest.id}"]`);if(c&&document.head.removeChild(c),t.length>0){let a=document.createElement("style");a.setAttribute("plugin",this.manifest.id),a.type="text/css",a.textContent=F(t),document.head.appendChild(a)}}async onload(){console.log(`Iconize Assistant v.${this.manifest.version} loaded.`),await this.loadSettings(),this.addSettingTab(new b(this.app,this)),this.addCommand({id:"set-file-icon",name:"Set file icon in frontmatter",checkCallback:async i=>{let t=this.app.workspace.getActiveFile();if(t){if(!i){let e=await this.getFileIcons(t);e&&await this.editFrontmatter(t,e)}return!0}return!1}})}onunload(){console.log(`IconFolderYaml v.${this.manifest.version} unloaded.`)}async loadSettings(){this.settings=Object.assign({},x,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};0&&(module.exports={});
